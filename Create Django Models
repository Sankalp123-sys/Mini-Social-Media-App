Mini Social Media App Using Django Backend and HTML/CSS/JS Frontend

1. Django Project Setup 
# django-admin startproject mini_social
# cd mini_social
# python manage.py startapp core

2. settings.py 
# Add 'core' to INSTALLED_APPS

3. models.py (core/models.py) 
from django.db import models
from django.contrib.auth.models import User

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    bio = models.TextField(blank=True)
    followers = models.ManyToManyField('self', symmetrical=False, related_name='following', blank=True)

class Post(models.Model):
    author = models.ForeignKey(User, on_delete=models.CASCADE)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    likes = models.ManyToManyField(User, related_name='liked_posts', blank=True)

class Comment(models.Model):
    post = models.ForeignKey(Post, related_name='comments', on_delete=models.CASCADE)
    author = models.ForeignKey(User, on_delete=models.CASCADE)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

4. views.py (core/views.py) 
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.decorators import login_required
from .models import Post, Comment, Profile


def register(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            Profile.objects.create(user=user)
            login(request, user)
            return redirect('home')
    else:
        form = UserCreationForm()
    return render(request, 'register.html', {'form': form})

@login_required
def home(request):
    posts = Post.objects.all().order_by('-created_at')
    return render(request, 'home.html', {'posts': posts})

@login_required
def create_post(request):
    if request.method == 'POST':
        content = request.POST.get('content')
        Post.objects.create(author=request.user, content=content)
        return redirect('home')
    return render(request, 'create_post.html')

@login_required
def post_detail(request, post_id):
    post = get_object_or_404(Post, id=post_id)
    if request.method == 'POST':
        content = request.POST.get('comment')
        Comment.objects.create(post=post, author=request.user, content=content)
        return redirect('post_detail', post_id=post_id)
    return render(request, 'post_detail.html', {'post': post})

@login_required
def like_post(request, post_id):
    post = get_object_or_404(Post, id=post_id)
    if request.user in post.likes.all():
        post.likes.remove(request.user)
    else:
        post.likes.add(request.user)
    return redirect('home')

@login_required
def profile(request, user_id):
    profile = get_object_or_404(Profile, user__id=user_id)
    return render(request, 'profile.html', {'profile': profile})

@login_required
def follow_user(request, user_id):
    target = get_object_or_404(Profile, user__id=user_id)
    if request.user.profile in target.followers.all():
        target.followers.remove(request.user.profile)
    else:
        target.followers.add(request.user.profile)
    return redirect('profile', user_id=user_id)

5. urls.py (mini_social/urls.py) 
from django.contrib import admin
from django.urls import path, include
from core import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.home, name='home'),
    path('register/', views.register, name='register'),
    path('post/create/', views.create_post, name='create_post'),
    path('post/<int:post_id>/', views.post_detail, name='post_detail'),
    path('post/<int:post_id>/like/', views.like_post, name='like_post'),
    path('profile/<int:user_id>/', views.profile, name='profile'),
    path('profile/<int:user_id>/follow/', views.follow_user, name='follow_user'),
    path('accounts/', include('django.contrib.auth.urls')),
]

6. Templates Directory Structure 
# templates
# ├── base.html
# ├── home.html
# ├── register.html
# ├── create_post.html
# ├── post_detail.html
# └── profile.html

7. Sample HTML Templates 

# base.html
<!DOCTYPE html>
<html>
<head>
  <title>Mini Social App</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <style>
    body { font-family: Arial; margin: 20px; background: #f9f9f9; }
    nav a { margin-right: 10px; text-decoration: none; color: #333; }
    nav { margin-bottom: 10px; }
    .post, .comment, .profile-section { background: #fff; border-radius: 5px; padding: 10px; margin-bottom: 15px; box-shadow: 0 0 5px rgba(0,0,0,0.1); }
    textarea { width: 100%; padding: 5px; }
    button { background: #007bff; color: #fff; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; }
    button:hover { background: #0056b3; }
  </style>
</head>
<body>
  <nav>
    <a href="/">Home</a>
    {% if user.is_authenticated %}
      <a href="/post/create/">New Post</a>
      <a href="/accounts/logout/">Logout</a>
    {% else %}
      <a href="/register/">Register</a>
      <a href="/accounts/login/">Login</a>
    {% endif %}
  </nav>
  <hr>
  {% block content %}{% endblock %}
</body>
</html>

# register.html
{% extends 'base.html' %}
{% block content %}
  <h2>Register</h2>
  <form method="post">{% csrf_token %}{{ form.as_p }}<button type="submit">Register</button></form>
{% endblock %}

# home.html
{% extends 'base.html' %}
{% block content %}
  <h2>All Posts</h2>
  {% for post in posts %}
    <div class="post">
      <p><strong>{{ post.author.username }}</strong>: {{ post.content }}</p>
      <a href="/post/{{ post.id }}/">Comments ({{ post.comments.count }})</a>
      <form action="/post/{{ post.id }}/like/" method="post">{% csrf_token %}<button type="submit">❤️ Like ({{ post.likes.count }})</button></form>
    </div>
  {% endfor %}
{% endblock %}

# create_post.html
{% extends 'base.html' %}
{% block content %}
  <h2>Create Post</h2>
  <form method="post">{% csrf_token %}<textarea name="content"></textarea><br><button type="submit">Post</button></form>
{% endblock %}

# post_detail.html
{% extends 'base.html' %}
{% block content %}
  <div class="post">
    <h2>{{ post.author.username }}'s Post</h2>
    <p>{{ post.content }}</p>
  </div>
  <h3>Comments</h3>
  {% for comment in post.comments.all %}
    <div class="comment">
      <strong>{{ comment.author.username }}:</strong> {{ comment.content }}
    </div>
  {% endfor %}
  <form method="post">{% csrf_token %}<textarea name="comment"></textarea><br><button type="submit">Comment</button></form>
{% endblock %}

# profile.html
{% extends 'base.html' %}
{% block content %}
  <div class="profile-section">
    <h2>{{ profile.user.username }}'s Profile</h2>
    <p>{{ profile.bio }}</p>
    <p>Followers: {{ profile.followers.count }}</p>
    <form method="post" action="/profile/{{ profile.user.id }}/follow/">{% csrf_token %}<button type="submit">{% if user.profile in profile.followers.all %}Unfollow{% else %}Follow{% endif %}</button></form>
  </div>
{% endblock %}

8. Run the Server 
# python manage.py makemigrations
# python manage.py migrate
# python manage.py createsuperuser
# python manage.py runserver
# Visit http://127.0.0.1:8000/ in browser.
